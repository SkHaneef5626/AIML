{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPNRlZ6nZLG8t0qIpStnWvT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SkHaneef5626/AIML/blob/main/(LAB-5)ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import nbconvert #recode the dataset\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "\n",
        "train = pd.read_csv('/titanic_train (5.csv') # Training set is already available\n",
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "id": "IG8djC4NnQzT",
        "outputId": "2aaf0eea-49c5-4f67-ba4f-fc7e4a9f3906"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   PassengerId  Survived  Pclass  \\\n",
              "0            1         0       3   \n",
              "1            2         1       1   \n",
              "2            3         1       3   \n",
              "3            4         1       1   \n",
              "4            5         0       3   \n",
              "\n",
              "                                                Name     Sex   Age  SibSp  \\\n",
              "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              "4                           Allen, Mr. William Henry    male  35.0      0   \n",
              "\n",
              "   Parch            Ticket     Fare Cabin Embarked  \n",
              "0      0         A/5 21171   7.2500   NaN        S  \n",
              "1      0          PC 17599  71.2833   C85        C  \n",
              "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              "3      0            113803  53.1000  C123        S  \n",
              "4      0            373450   8.0500   NaN        S  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1903b942-9ac7-4199-8421-938145fd4d05\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Name</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Ticket</th>\n",
              "      <th>Fare</th>\n",
              "      <th>Cabin</th>\n",
              "      <th>Embarked</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Braund, Mr. Owen Harris</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>A/5 21171</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>PC 17599</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C85</td>\n",
              "      <td>C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>Heikkinen, Miss. Laina</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>STON/O2. 3101282</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113803</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>C123</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>Allen, Mr. William Henry</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>373450</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>NaN</td>\n",
              "      <td>S</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1903b942-9ac7-4199-8421-938145fd4d05')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1903b942-9ac7-4199-8421-938145fd4d05 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1903b942-9ac7-4199-8421-938145fd4d05');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a9b0044-f93a-4e95-b62d-4059e54171ad\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a9b0044-f93a-4e95-b62d-4059e54171ad')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a9b0044-f93a-4e95-b62d-4059e54171ad button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train",
              "summary": "{\n  \"name\": \"train\",\n  \"rows\": 891,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 1,\n        \"max\": 891,\n        \"num_unique_values\": 891,\n        \"samples\": [\n          710,\n          440,\n          841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 891,\n        \"samples\": [\n          \"Moubarek, Master. Halim Gonios (\\\"William George\\\")\",\n          \"Kvillner, Mr. Johan Henrik Johannesson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.526497332334044,\n        \"min\": 0.42,\n        \"max\": 80.0,\n        \"num_unique_values\": 88,\n        \"samples\": [\n          0.75,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 681,\n        \"samples\": [\n          \"11774\",\n          \"248740\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.693428597180905,\n        \"min\": 0.0,\n        \"max\": 512.3292,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          11.2417,\n          51.8625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 147,\n        \"samples\": [\n          \"D45\",\n          \"B49\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "train.info(verbose=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OvEWhAO-n_bI",
        "outputId": "35143a0a-f6c4-4d11-9cc7-da45adeec7d8"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 891 entries, 0 to 890\n",
            "Data columns (total 12 columns):\n",
            " #   Column       Non-Null Count  Dtype  \n",
            "---  ------       --------------  -----  \n",
            " 0   PassengerId  891 non-null    int64  \n",
            " 1   Survived     891 non-null    int64  \n",
            " 2   Pclass       891 non-null    int64  \n",
            " 3   Name         891 non-null    object \n",
            " 4   Sex          891 non-null    object \n",
            " 5   Age          714 non-null    float64\n",
            " 6   SibSp        891 non-null    int64  \n",
            " 7   Parch        891 non-null    int64  \n",
            " 8   Ticket       891 non-null    object \n",
            " 9   Fare         891 non-null    float64\n",
            " 10  Cabin        204 non-null    object \n",
            " 11  Embarked     889 non-null    object \n",
            "dtypes: float64(2), int64(5), object(5)\n",
            "memory usage: 83.7+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "d=train.describe(percentiles=[.25,.5,.75])\n",
        "d"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "grQ8IaROoHv8",
        "outputId": "7b9ce3f5-c9ac-49e8-e589-e0bb65ab3d30"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
              "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
              "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
              "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
              "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
              "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
              "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
              "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
              "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
              "\n",
              "            Parch        Fare  \n",
              "count  891.000000  891.000000  \n",
              "mean     0.381594   32.204208  \n",
              "std      0.806057   49.693429  \n",
              "min      0.000000    0.000000  \n",
              "25%      0.000000    7.910400  \n",
              "50%      0.000000   14.454200  \n",
              "75%      0.000000   31.000000  \n",
              "max      6.000000  512.329200  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f7d81972-410c-43e7-953e-3076a037742f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PassengerId</th>\n",
              "      <th>Survived</th>\n",
              "      <th>Pclass</th>\n",
              "      <th>Age</th>\n",
              "      <th>SibSp</th>\n",
              "      <th>Parch</th>\n",
              "      <th>Fare</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>714.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "      <td>891.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.383838</td>\n",
              "      <td>2.308642</td>\n",
              "      <td>29.699118</td>\n",
              "      <td>0.523008</td>\n",
              "      <td>0.381594</td>\n",
              "      <td>32.204208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>257.353842</td>\n",
              "      <td>0.486592</td>\n",
              "      <td>0.836071</td>\n",
              "      <td>14.526497</td>\n",
              "      <td>1.102743</td>\n",
              "      <td>0.806057</td>\n",
              "      <td>49.693429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.420000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>223.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>20.125000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>7.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>446.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>14.454200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>668.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>31.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>891.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>512.329200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7d81972-410c-43e7-953e-3076a037742f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f7d81972-410c-43e7-953e-3076a037742f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f7d81972-410c-43e7-953e-3076a037742f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c6bf7db3-9411-4a87-9379-56258aa491af\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c6bf7db3-9411-4a87-9379-56258aa491af')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c6bf7db3-9411-4a87-9379-56258aa491af button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_5d793e29-9b12-4304-8683-0c0582c2cef5\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('d')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5d793e29-9b12-4304-8683-0c0582c2cef5 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('d');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "d",
              "summary": "{\n  \"name\": \"d\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429856,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079693,\n        \"min\": 0.8360712409770513,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228577,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dT=d.T\n",
        "dT.plot.bar(y='count')\n",
        "plt.title(\"Bar plot of the count of numeric features\",fontsize=17)\n",
        "plt.xlabel(\"Numeric features\",fontsize=17)\n",
        "plt.ylabel(\"Count\",fontsize=17)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "1PmX394eoJp2",
        "outputId": "ef76ea62-a187-4066-acaa-852ffc2e5d64"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Count')"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sns.set_style('whitegrid')\n",
        "sns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow')\n",
        "#sns.pairplot(train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "-NdQDUA8oJsU",
        "outputId": "8f889342-6535-4d8a-afa2-9b4d68ded587"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Survived', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sns.set_style('whitegrid')\n",
        "sns.countplot(x='Survived',hue='Age',data=train,palette='rainbow')\n",
        "#sns.pairplot(train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "uNnWZ4AUoJu4",
        "outputId": "9f2c25c0-0fce-436d-b61d-1bdb660a1b55"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Survived', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set_style('whitegrid')\n",
        "sns.countplot(x='Survived',hue='Sex',data=train,palette='rainbow')\n",
        "#sns.pairplot(train)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "-2j3NJGRoJya",
        "outputId": "cc0e752d-4b48-44cf-f85e-63239411ccd4"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Survived', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set_style('whitegrid')\n",
        "sns.countplot(x='Survived',hue='SibSp',data=train,palette='rainbow')\n",
        "#sns.pairplot(train)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "KPEppaKfoJ0A",
        "outputId": "1bca9cec-0a9b-4d30-d686-27f9064a2620"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Survived', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set_style('whitegrid')\n",
        "sns.countplot(x='Survived',hue='Parch',data=train,palette='rainbow')\n",
        "#sns.pairplot(train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "sURG-bcyoJ16",
        "outputId": "3de4676c-39cd-4625-82f3-d1cd15c1759b"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Survived', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f_class_survived=train.groupby('Pclass')['Survived'].mean()\n",
        "f_class_survived = pd.DataFrame(f_class_survived)\n",
        "f_class_survived\n",
        "f_class_survived.plot.bar(y='Survived')\n",
        "sns.countplot(x='Survived',hue='Pclass',data=f_class_survived,palette='rainbow')\n",
        "plt.title(\"Fraction of passengers survived by class\",fontsize=17)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "KSPrRrUhoJ5c",
        "outputId": "d4c5770d-6155-4e9a-edac-e9f70754028c"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Fraction of passengers survived by class')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f_class_Age=train.groupby('Pclass')['Age'].mean()\n",
        "f_class_Age = pd.DataFrame(f_class_Age)\n",
        "\n",
        "f_class_Age.plot.bar(y='Age')\n",
        "plt.title(\"Average age of passengers by class\",fontsize=17)\n",
        "plt.ylabel(\"Age (years)\", fontsize=17)\n",
        "jhbplt.xlabel(\"Passenger class\", fontsize=17)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 499
        },
        "id": "_MxL_SZZomnC",
        "outputId": "69dbc3b7-c119-4449-91c7-d8d5ae0a75ad"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Passenger class')"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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x8BDREREksfAQ0RERJLHwENERESSx8BDREREksfAQ0RERJLHwENERESSx8BDREREksfAQ0RERJLHwENERESSx8BDREREksfAQ0RERJLHwENERESSx8BDREREksfAQ0RERJLHwENERESSx8BDREREksfAQ0RERJLHwENERESSp1/SBejC2rVrsW7dOrVh9erVw7Fjx0qoIiIiIipNJBF4AKBRo0bYtm2b+LdcLi/BaoiIiKg0kUzgkcvlsLKyKukyiIiIqBSSTOAJDQ1F+/btYWRkBAcHB8ycORPVq1cv6bKIiIioFJBE4Pnoo4/g6uqKevXqITo6GuvXr8eIESNw5MgRmJqaFmlZSqXyHVWpGzxVp1ul/fUuK9gudYdtUjfYJnWrNLfLwtYmicDTsWNH8f+2trZo1qwZOnXqhKNHj+KLL74o0rICAwN1XZ7OGBsbo0mTJiVdhqQEBwcjNTW1pMso09gudYttsvjYJnVPCu1SEoHnTebm5qhbty7CwsKKPK+9vT1/GXxAbGxsSroEIjVsk1QaleZ2qVQqC3WwQpKBJzk5Gc+ePdOqE7NcLmfg+YDwtabShm2SSiMptEtJBJ5ly5ahU6dOqF69OqKiorB27Vro6enB2dm5pEsjIiKiUkASgefly5f47rvvEBcXB0tLS7Rs2RL79u2DpaVlSZdGREREpYAkAs/vv/9e0iUQERFRKcZnaREREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5DHwEBERkeQx8BAREZHkMfAQERGR5Ekq8OzevRudO3eGvb09vvjiCwQEBJR0SURERFQKSCbw+Pj4wNXVFV9//TUOHToEW1tbjBs3DrGxsSVdGhEREZUwyQSebdu2YfDgwRg4cCAaNmyIn3/+GeXKlcOBAwdKujQiIiIqYZIIPBkZGQgKCkLbtm3FYXp6emjb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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Data Wrangling\n",
        "Define a function to impute age feature**"
      ],
      "metadata": {
        "id": "fwoKbPrypRsj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a=list(f_class_Age['Age'])\n",
        "def impute_age(cols):\n",
        "    Age = cols[0]\n",
        "    Pclass = cols[1]\n",
        "\n",
        "    if pd.isnull(Age):\n",
        "        if Pclass == 1:\n",
        "            return a[0]\n",
        "        elif Pclass == 2:\n",
        "            return a[1]\n",
        "        else:\n",
        "            return a[2]\n",
        "    else:\n",
        "        return Age"
      ],
      "metadata": {
        "id": "3rvv3O6UpcRW"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Apply the above-defined function and plot the count of numeric features**"
      ],
      "metadata": {
        "id": "ydKYdwONpljY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train['Age']=train[['Age','Pclass']].apply(impute_age,axis=1)\n",
        "d=train.describe()\n",
        "\n",
        "dT=d.T\n",
        "dT.plot.bar(y='count')\n",
        "plt.title(\"Bar plot of the count of numeric features\",fontsize=17)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 634
        },
        "id": "90ELl_clprrI",
        "outputId": "35587f65-4668-41be-ccf0-6120c8dc887d"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-33-e1706a1c4d18>:3: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  Age = cols[0]\n",
            "<ipython-input-33-e1706a1c4d18>:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n",
            "  Pclass = cols[1]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Bar plot of the count of numeric features')"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Drop the 'Cabin' feature and any other null value**"
      ],
      "metadata": {
        "id": "rT5OTouCqX9D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train.drop(['Cabin','PassengerId','Name','Ticket'],axis=1,inplace=True)\n",
        "train.dropna(inplace=True)\n",
        "train.head()\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "-HICZGLvqsLy",
        "outputId": "cf259406-c67d-4645-87bb-aae95e17db08"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "\"['Cabin', 'PassengerId', 'Name', 'Ticket'] not found in axis\"",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-40-1806bf81acb0>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Cabin'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'PassengerId'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Name'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Ticket'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5579\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5580\u001b[0m         \"\"\"\n\u001b[0;32m-> 5581\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5582\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5583\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4787\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4788\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4829\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4830\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4831\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7069\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7070\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7071\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7072\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['Cabin', 'PassengerId', 'Name', 'Ticket'] not found in axis\""
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**\n",
        "Convert categorial feature like 'Sex'**"
      ],
      "metadata": {
        "id": "_RW5cUn8qwdT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sex = pd.get_dummies(train['Sex'],drop_first=True)\n",
        "embark = pd.get_dummies(train['Embarked'],drop_first=True)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "kQq6yU7orH44",
        "outputId": "42640d58-c8c5-44cb-cb25-9954a0028a1d"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'Sex'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'Sex'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-41-4256aa9e6dd8>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_dummies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sex'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdrop_first\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0membark\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_dummies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Embarked'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdrop_first\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'Sex'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Now drop the 'Sex' and 'Embarked' columns and concatenate the new dummy variables**"
      ],
      "metadata": {
        "id": "6w-TdSU1rRj2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train.drop(['Sex','Embarked'],axis=1,inplace=True)\n",
        "train = pd.concat([train,sex,embark],axis=1)\n",
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "-_QN_9wWrWW-",
        "outputId": "d59d6143-8351-49dc-f079-ca9ce7c6dfc7"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "\"['Sex', 'Embarked'] not found in axis\"",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-80d23206b1a2>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sex'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Embarked'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtrain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msex\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0membark\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5579\u001b[0m                 \u001b[0mweight\u001b[0m  \u001b[0;36m1.0\u001b[0m     \u001b[0;36m0.8\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5580\u001b[0m         \"\"\"\n\u001b[0;32m-> 5581\u001b[0;31m         return super().drop(\n\u001b[0m\u001b[1;32m   5582\u001b[0m             \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5583\u001b[0m             \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4786\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4787\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4788\u001b[0;31m                 \u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4790\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4828\u001b[0m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4829\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4830\u001b[0;31m                 \u001b[0mnew_axis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4831\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_axis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4832\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mdrop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   7068\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7069\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0merrors\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7070\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{labels[mask].tolist()} not found in axis\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7071\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7072\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: \"['Sex', 'Embarked'] not found in axis\""
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Logistic Regression model fit and prediction**"
      ],
      "metadata": {
        "id": "XgxbZsASrqJU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    train.drop('Survived',axis=1),train['Survived'],\n",
        "    test_size=0.20,random_state=111)"
      ],
      "metadata": {
        "id": "jP2xAw_1rvWP"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**F1-score as a function of regularization(penality)parameter**"
      ],
      "metadata": {
        "id": "2mp9C6XFr309"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import classification_report\n",
        "nsimu=201\n",
        "penalty=[0]*nsimu\n",
        "logmodel=[0]*nsimu\n",
        "predictions =[0]*nsimu\n",
        "class_report = [0]*nsimu\n",
        "f1=[0]*nsimu\n",
        "\n",
        "for i in range(1,nsimu):\n",
        "        logmodel[i] =(LogisticRegression(C=i/1000,tol=1e-4, max_iter=int(1e6),\n",
        "                                         n_jobs=4))\n",
        "        logmodel[i].fit(X_train,y_train)\n",
        "        predictions[i] = logmodel[i].predict(X_test)\n",
        "        class_report[i] = classification_report(y_test,predictions[i])\n",
        "        l=class_report[i].split()\n",
        "        f1[i] = l[len(l)-2]\n",
        "        penalty[i]=1000/i\n",
        "\n",
        "plt.scatter(penalty[1:len(penalty)-2],f1[1:len(f1)-2])\n",
        "plt.title(\"F1-score vs. regularization parameter\",fontsize=20)\n",
        "plt.xlabel(\"Penalty parameter\",fontsize=17)\n",
        "plt.ylabel(\"F1-score on test data\",fontsize=17)"
      ],
      "metadata": {
        "id": "QdDaBdbJr9Xs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**F1-score as a function of test set size (fraction)**"
      ],
      "metadata": {
        "id": "Y_DuIG9CsDV8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "nsimu=101\n",
        "class_report = [0]*nsimu\n",
        "f1=[0]*nsimu\n",
        "test_fraction =[0]*nsimu\n",
        "for i in range(1,nsimu):\n",
        "        X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1),\n",
        "                                                    train['Survived'], test_size=0.1+(i-1)*0.007,\n",
        "                                                    random_state=111)\n",
        "        logmodel =(LogisticRegression(C=1,tol=1e-4, max_iter=1000,n_jobs=4))\n",
        "        logmodel.fit(X_train,y_train)\n",
        "        predictions = logmodel.predict(X_test)\n",
        "        class_report[i] = classification_report(y_test,predictions)\n",
        "        l=class_report[i].split()\n",
        "        f1[i] = l[len(l)-2]\n",
        "        test_fraction[i]=0.1+(i-1)*0.007\n",
        "\n",
        "plt.plot(test_fraction[1:len(test_fraction)-2],f1[1:len(f1)-2])\n",
        "plt.title(\"F1-score vs. test set size (fraction)\",fontsize=20)\n",
        "plt.xlabel(\"Test set size (fraction)\",fontsize=17)\n",
        "plt.ylabel(\"F1-score on test data\",fontsize=17)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "EsWG9g5-sF7D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "nsimu=101\n",
        "class_report = [0]*nsimu\n",
        "f1=[0]*nsimu\n",
        "random_init =[0]*nsimu\n",
        "for i in range(1,nsimu):\n",
        "        X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1),\n",
        "                                                    train['Survived'], test_size=0.3,\n",
        "                                                    random_state=i+100)\n",
        "        logmodel =(LogisticRegression(C=1,tol=1e-5, max_iter=1000,n_jobs=4))\n",
        "        logmodel.fit(X_train,y_train)\n",
        "        predictions = logmodel.predict(X_test)\n",
        "        class_report[i] = classification_report(y_test,predictions)\n",
        "        l=class_report[i].split()\n",
        "        f1[i] = l[len(l)-2]\n",
        "        random_init[i]=i+100\n",
        "\n",
        "plt.plot(random_init[1:len(random_init)-2],f1[1:len(f1)-2])\n",
        "plt.title(\"F1-score vs. random initialization seed\",fontsize=20)\n",
        "plt.xlabel(\"Random initialization seed\",fontsize=17)\n",
        "plt.ylabel(\"F1-score on test data\",fontsize=17)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "Gkud-AaJsL9D",
        "outputId": "230b9a88-e14e-41e8-c830-22f04992141e"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'LogisticRegression' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-c86741a55415>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m                                                     \u001b[0mtrain\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Survived'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m                                                     random_state=i+100)\n\u001b[0;32m----> 9\u001b[0;31m         \u001b[0mlogmodel\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mC\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1e-5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0mlogmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlogmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'LogisticRegression' is not defined"
          ]
        }
      ]
    }
  ]
}